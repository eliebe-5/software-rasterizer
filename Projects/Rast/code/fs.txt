#version 430

layout(location=0) in vec2 uv;
layout(location=1) in vec3 vertPos;
layout(location=2) in vec3 NORM;
layout(location=3) in vec4 lightPos;
layout(location=4) in vec4 specColor;

out vec3 Color;

uniform sampler2D texSampler;

const vec3 diffuseColor = vec3(0.2, 0.2, 0.2);
const float shininess = 16.0;
const float screenGamma = 2.2;

void main()
{
    vec3 normal = normalize(NORM);
    vec3 lightDir = normalize(vec3(lightPos) - vertPos);

    float lambertian = max(dot(lightDir,normal), 0.0);
    float specular = 0.1;

	if(lambertian > 0.0)
	{   
		vec3 viewDir = normalize(-vertPos);

		vec3 halfDir = normalize(lightDir + viewDir);
   		float specAngle = max(dot(halfDir, normal), 0.0);
    		specular = pow(specAngle, shininess);

	}
    
    vec3 colorLinear = lambertian * diffuseColor + specular * vec3(specColor);
    vec3 colorGammaCorrected = pow(colorLinear, vec3(1.0/screenGamma));

    Color = texture(texSampler,uv).rgb;
}